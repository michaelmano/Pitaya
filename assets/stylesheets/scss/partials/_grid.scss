/* ==========================================================================
 Grid system
========================================================================== */

@function escapeNumerator($numerator, $namespace: '') {
  @if($namespace == '') {
    $numerator-as-string: inspect($numerator);
    $escaped-numerator: '';

    // Loop through all digits in the numerator and escape individually
    @for $i from 1 through str-length($numerator-as-string) {
      $digit: str-slice($numerator-as-string, $i, $i);
      $escaped-numerator: $escaped-numerator+\3+$digit;
    }

    @return $escaped-numerator;
  } @else {
    @return $numerator;
  }
}

@function avCreateClassName($style, $numerator, $denominator, $breakpoint-alias) {

  $class-name: null;

  @if $style == 'fraction' or $style == 'fragment' {
    // Set delimiter as slash or text
    $delimiter: if($style == 'fraction', \/, -of-);
    $class-name: #{$av-width-class-namespace}#{escapeNumerator($numerator, $av-width-class-namespace)}#{$delimiter}#{$denominator}#{$breakpoint-alias};
  } @else {
    @if $av-width-class-namespace == '' {
      @error "Percentage value class names require a namespace to be set (see $av-width-class-namespace). Selective escaping (e.g. the 5 of 50) cannot be done.";
    }
    $class-width: floor(($numerator / $denominator) * 100);
    $class-name: #{$av-width-class-namespace}#{$class-width}#{$breakpoint-alias};
  }

  @return $class-name;
}

@mixin av-create-widths($widths, $breakpoint-alias: null) {

  // Initialise an empty utility map that will eventually contain all our classes
  $pseudo-class-map: ();

  // Loop widths
  @each $denominator in $widths {

    // If 1=1, 2=2, 3=3; @for will skip over so create 1/1 class manually
    @if ($denominator == 1) {

      // Create 1/1 class
      $class-name: avCreateClassName($av-width-class-style, 1, 1, $breakpoint-alias);
      .#{$class-name} {
        width: 100%;
      }

    } @else {

      // Loop widths as fractions
      @for $numerator from 1 to $denominator {

        // Create class name and set width value
        $class-name: avCreateClassName($av-width-class-style, $numerator,$denominator, $breakpoint-alias);
        $width-value: percentage($numerator / $denominator);

        // Is this width already in our utility map?
        $duplicate: map-get($pseudo-class-map, $width-value);

        // Create width class
        .#{$class-name} {

          // If this width is in utility map, @extend the duplicate, else create a new one
          @if $duplicate {
            @extend .#{$duplicate};
          } @else {
            width: $width-value;
          }
        }

        // Add this class to utility map
        $add-class: ($width-value: $class-name);
        $pseudo-class-map: map-merge($pseudo-class-map, $add-class);
      }
    }
  }
}

@mixin av-mq($alias) {

  // Search breakpoint map for alias
  $query: map-get($av-breakpoints, $alias);

  // If alias exists, print out media query
  @if $query {
    @media #{$query} {
      @content;
    }
  } @else {
    @error "No breakpoint found for #{$alias}";
  }
}





/* GRID LAYOUT
  ======================================================================= */

.#{$av-namespace} {
  display: block;
  list-style: none;
  padding: 0;
  margin: 0;
  margin-left: -($gutter);
  font-size: 0rem;
}

  .#{$av-namespace}__item {
    box-sizing: border-box;
    display: inline-block;
    width: 100%;
    padding: 0;
    padding-left: $gutter;
    vertical-align: top;
    font-size: 1rem;
  }

@if $av-enable-grid-center {

  .#{$av-namespace}--center {
    text-align: center;

    > .#{$av-namespace}__item {
      text-align: left;
    }
  }
}

@if $av-enable-grid-item-center {

  .#{$av-namespace}__item--center {
    display: block;
    margin: 0 auto;
  }
}

@if $av-enable-grid-right {

  .#{$av-namespace}--right {
    text-align: right;

    > .#{$av-namespace}__item {
      text-align: left;
    }
  }
}

@if $av-enable-grid-middle {

  .#{$av-namespace}--middle {

    > .#{$av-namespace}__item {
      vertical-align: middle;
    }
  }
}

@if $av-enable-grid-bottom {

  .#{$av-namespace}--bottom {

    > .#{$av-namespace}__item {
      vertical-align: bottom;
    }
  }
}

@if $av-enable-grid-flush {

  .#{$av-namespace}--flush {
    margin-left: 0;

    > .#{$av-namespace}__item {
      padding-left: 0;
    }
  }
}

@if $av-enable-grid-tiny {

  .#{$av-namespace}--tiny {
    margin-left: -($gutter / 4);

    > .#{$av-namespace}__item {
      padding-left: ($gutter / 4);
    }
  }
}

@if $av-enable-grid-small {

  .#{$av-namespace}--small {
    margin-left: -($gutter / 2);

    > .#{$av-namespace}__item {
      padding-left: ($gutter / 2);
    }
  }
}

@if $av-enable-grid-large {

  .#{$av-namespace}--large {
    margin-left: -($gutter * 2);

    > .#{$av-namespace}__item {
      padding-left: ($gutter * 2);
    }
  }
}

@if $av-enable-grid-huge {

  .#{$av-namespace}--huge {
    margin-left: -($gutter * 4);

    > .#{$av-namespace}__item {
      padding-left: ($gutter * 4);
    }
  }
}

@if $av-enable-grid-auto {

  .#{$av-namespace}--auto {

    > .#{$av-namespace}__item {
      width: auto;
    }
  }
}

@if $av-enable-grid-rev {

  .#{$av-namespace}--rev {
    direction: rtl;

    > .#{$av-namespace}__item {
      direction: ltr;
    }
  }
}



/* GRID WIDTHS
  ======================================================================= */

// Loop default widths
@include av-create-widths($av-widths);

// If responsive flag enabled, loop breakpoint widths
@if $av-enable-responsive {

  @each $alias, $query in $av-breakpoints {

    // Create each media query
    @media #{$query} {
      @include av-create-widths($av-widths, --#{$alias});
    }
  }
}
